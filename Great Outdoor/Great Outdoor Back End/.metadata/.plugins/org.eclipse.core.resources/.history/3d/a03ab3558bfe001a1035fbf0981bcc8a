package com.cg.go.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;

import com.cg.go.dao.CartRepository;
import com.cg.go.entity.CartItemEntity;
import com.cg.go.exception.CartException;
import com.cg.go.exception.WishlistException;
import com.cg.go.model.CartItemModel;
import com.cg.go.model.ProductModel;
import com.cg.go.model.WishlistItemModel;

public class CartServiceImpl implements CartService {
	
	@Autowired
	private CartRepository cartRepository;
	
	@Autowired
	private ProductService productService;
	
	
	private CartItemEntity of(CartItemModel source) {
		CartItemEntity result=null;
		if(source!=null) {
			result=new CartItemEntity();
			result.setCartId(0);
			result.setProductId(source.getProduct().getProductId());
			result.setUserId(source.getUserId());
			result.setQuantity(source.getQuantity());
			result.setCartItemPrice(source.getCartItemPrice());
		}
		return result;
	}
	
	private CartItemModel of(CartItemEntity source) {
		CartItemModel result=null;
		if(source!=null) {
			result=new CartItemModel();
			result.setCartId(0);
			ProductModel product=productService.findByProductId(source.getProductId());
			result.setProduct(product);
			result.setUserId(source.getUserId());
			result.setQuantity(source.getQuantity());
			result.setCartItemPrice(source.getCartItemPrice());
		}
		return result;
	}
	


	@Override
	public List<CartItemModel> findCartlist(String userId) {
		
		return cartRepository.findAllByUserId(userId).stream()
				.map(entity -> of(entity))
				.collect(Collectors.toList());
	}

	@Override
	public CartItemModel findCartItem(String productId, String userId) {
	
		return of(cartRepository.findCartItem(productId, userId));
	}

	@Override
	public CartItemModel addCart(CartItemModel cartItemModel) throws CartException {
		
	if(cartItemModel !=null) {
			
			if(cartRepository.existsById(cartItemModel.getCartId())) {
				
				throw new CartException("Cart Item Already Exists !!");
			}else {
				cartItemModel= of(cartRepository.save(of(cartItemModel)));
			}
		}
		
		return cartItemModel;
	}

	@Override
	public void deleteCartItem(String productId, String userId) throws CartException {
		
		
	if(productId!=null && userId!=null) {
			
			CartItemModel cartItemModel=of(cartRepository.findCartItem(productId, userId));
			if(cartItemModel!=null) {
				cartRepository.deleteCartItem(userId, productId);;
			}else {
				throw new CartException("Wishlist Item Does Not Exists !!");
			}
			
		}else {
			throw new CartException("Product Id OR User Id Is Null !!");
		}
		
	}

	@Override
	public void deleteCartlist(String userId) throws CartException {
		
	if(userId!=null) {
			
			List<CartItemModel> cartlist =cartRepository.findAllByUserId(userId).stream()
					.map(entity -> of(entity))
					.collect(Collectors.toList());
			if(cartlist!=null) {
				
				cartRepository.deleteCart(userId);;
			}else {
				 throw new CartException("Cart Does Not Exists");
			}
			
			
		}else {
			throw new CartException("User Id For Deletion Is Null");
		}
		
	}

}
